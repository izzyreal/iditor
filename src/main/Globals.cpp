#include "Globals.h"

std::set<std::string> Globals::includeDirectories;
std::map<std::string, std::string> Globals::definitions;
std::map<std::string, Macro> Globals::macros;

const char* Globals::highlight_query = "; Functions\n"
                                                   "\n"
                                                   "(call_expression\n"
                                                   "  function: (qualified_identifier\n"
                                                   "    name: (identifier) @function))\n"
                                                   "\n"
                                                   "(template_function\n"
                                                   "  name: (identifier) @function)\n"
                                                   "\n"
                                                   "(template_method\n"
                                                   "  name: (field_identifier) @function)\n"
                                                   "\n"
                                                   "(template_function\n"
                                                   "  name: (identifier) @function)\n"
                                                   "\n"
                                                   "(function_declarator\n"
                                                   "  declarator: (qualified_identifier\n"
                                                   "    name: (identifier) @function))\n"
                                                   "\n"
                                                   "(function_declarator\n"
                                                   "  declarator: (qualified_identifier\n"
                                                   "    name: (identifier) @function))\n"
                                                   "\n"
                                                   "(function_declarator\n"
                                                   "  declarator: (field_identifier) @function)\n"
                                                   "\n"
                                                   "; Types\n"
                                                   "\n"
                                                   "((namespace_identifier) @type\n"
                                                   " (#match? @type \"^[A-Z]\"))\n"
                                                   "\n"
                                                   "(auto) @type\n"
                                                   "\n"
                                                   "; Constants\n"
                                                   "\n"
                                                   "(this) @variable.builtin\n"
                                                   "(nullptr) @constant\n"
                                                   "\n"
                                                   "; Keywords\n"
                                                   "\n"
                                                   "[\n"
                                                   " \"catch\"\n"
                                                   " \"class\"\n"
                                                   " \"co_await\"\n"
                                                   " \"co_return\"\n"
                                                   " \"co_yield\"\n"
                                                   " \"constexpr\"\n"
                                                   " \"constinit\"\n"
                                                   " \"consteval\"\n"
                                                   " \"delete\"\n"
                                                   " \"explicit\"\n"
                                                   " \"final\"\n"
                                                   " \"friend\"\n"
                                                   " \"mutable\"\n"
                                                   " \"namespace\"\n"
                                                   " \"noexcept\"\n"
                                                   " \"new\"\n"
                                                   " \"override\"\n"
                                                   " \"private\"\n"
                                                   " \"protected\"\n"
                                                   " \"public\"\n"
                                                   " \"template\"\n"
                                                   " \"throw\"\n"
                                                   " \"try\"\n"
                                                   " \"typename\"\n"
                                                   " \"using\"\n"
                                                   " \"virtual\"\n"
                                                   " \"concept\"\n"
                                                   " \"requires\"\n"
                                                   "] @keyword\n"
                                                   "\n"
                                                   "; Strings\n"
                                                   "\n"
                                                   "(raw_string_literal) @string\n"
                                                   "\"break\" @keyword\n"
                                       "\"case\" @keyword\n"
                                       "\"const\" @keyword\n"
                                       "\"continue\" @keyword\n"
                                       "\"default\" @keyword\n"
                                       "\"do\" @keyword\n"
                                       "\"else\" @keyword\n"
                                       "\"enum\" @keyword\n"
                                       "\"extern\" @keyword\n"
                                       "\"for\" @keyword\n"
                                       "\"if\" @keyword\n"
                                       "\"inline\" @keyword\n"
                                       "\"return\" @keyword\n"
                                       "\"sizeof\" @keyword\n"
                                       "\"static\" @keyword\n"
                                       "\"struct\" @keyword\n"
                                       "\"switch\" @keyword\n"
                                       "\"typedef\" @keyword\n"
                                       "\"union\" @keyword\n"
                                       "\"volatile\" @keyword\n"
                                       "\"while\" @keyword\n"
                                       "\n"
                                       "\"#define\" @keyword\n"
                                       "\"#elif\" @keyword\n"
                                       "\"#else\" @keyword\n"
                                       "\"#endif\" @keyword\n"
                                       "\"#if\" @keyword\n"
                                       "\"#ifdef\" @keyword\n"
                                       "\"#ifndef\" @keyword\n"
                                       "\"#include\" @keyword\n"
                                       "(preproc_directive) @keyword\n"
                                       "\n"
                                       "\"--\" @operator\n"
                                       "\"-\" @operator\n"
                                       "\"-=\" @operator\n"
                                       "\"->\" @operator\n"
                                       "\"=\" @operator\n"
                                       "\"!=\" @operator\n"
                                       "\"*\" @operator\n"
                                       "\"&\" @operator\n"
                                       "\"&&\" @operator\n"
                                       "\"+\" @operator\n"
                                       "\"++\" @operator\n"
                                       "\"+=\" @operator\n"
                                       "\"<\" @operator\n"
                                       "\"==\" @operator\n"
                                       "\">\" @operator\n"
                                       "\"||\" @operator\n"
                                       "\n"
                                       "\".\" @delimiter\n"
                                       "\";\" @delimiter\n"
                                       "\n"
                                       "(string_literal) @string\n"
                                       "(system_lib_string) @string\n"
                                       "\n"
                                       "(null) @constant\n"
                                       "(number_literal) @number\n"
                                       "(char_literal) @number\n"
                                       "\n"
                                       "(call_expression\n"
                                       "  function: (identifier) @function)\n"
                                       "(call_expression\n"
                                       "  function: (field_expression\n"
                                       "    field: (field_identifier) @function))\n"
                                       "(function_declarator\n"
                                       "  declarator: (identifier) @function)\n"
                                       "(preproc_function_def\n"
                                       "  name: (identifier) @function.special)\n"
                                       "\n"
                                       "(field_identifier) @property\n"
                                       "(statement_identifier) @label\n"
                                       "(type_identifier) @type\n"
                                       "(primitive_type) @type\n"
                                       "(sized_type_specifier) @type\n"
                                       "\n"
                                       "((identifier) @constant\n"
                                       " (#match? @constant \"^[A-Z][A-Z\\\\d_]*$\"))\n"
                                       "\n"
                                       "(identifier) @variable\n"
                                       "\n"
                                       "(comment) @comment";